// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  idUser String @id @default(uuid())

  email        String    @unique
  isGoogleUser Boolean   @default(false)
  userNickName String    @unique
  password     String?
  fullName     String
  isActive     Boolean   @default(true)
  roles        String[]  @default(["user"])
  lastLogin    DateTime?
  createdBy    String    @default("SYSTEM")
  updatedBy    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  userAdrress      UserAddress[]
  favoriteProducts FavoriteProducts?
  shoppinCart      ShoppingCart?
  order            Order[]
}

model UserAddress {
  idUserAddress String @id @default(uuid())

  streetName     String
  exteriorNumber String
  interiorNumber String?
  neighborhood   String?
  city           String
  state          String
  country        String
  zipCode        String

  User       User?   @relation(fields: [userIdUser], references: [idUser])
  userIdUser String?
}

model FavoriteProducts {
  idFavorites Int @id @default(autoincrement())

  listName     String   @default("Favorites")
  productsList String[] @default([])

  user       User   @relation(fields: [userIdUser], references: [idUser])
  userIdUser String @unique
}

model ShoppingCart {
  idCart Int @id @default(autoincrement())

  updateAt DateTime @updatedAt

  User                User                  @relation(fields: [userIdUser], references: [idUser])
  userIdUser          String                @unique
  shoppingCartDetails ShoppingCartDetails[]
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERED
  CANCELLED
}

model Order {
  idOrder String @id @default(uuid())

  orderStatus     OrderStatus @default(PENDING)
  totalAmount     Float
  totalItems      Int
  discountApplied Float       @default(0)
  cuponUsed       Boolean     @default(false)
  paidAt          DateTime?
  isPaid          Boolean     @default(false)
  stripeChargeId  String?
  createdBy       String
  updatedBy       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  User         User?          @relation(fields: [userIdUser], references: [idUser])
  userIdUser   String?
  orderReceipt OrderReceipt?
  orderAddress OrderAddress?
  orderDetails OrderDetails[]
}

model OrderReceipt {
  idOrderReceipt String @id @default(uuid())

  receiptUrl String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Order        Order? @relation(fields: [orderIdOrder], references: [idOrder])
  orderIdOrder String @unique
}

model OrderAddress {
  idOrderAddress String @id @default(uuid())

  streetName     String
  exteriorNumber Int
  interiorNumber Int?
  neighborhood   String
  city           String
  state          String
  zipCode        String

  Order        Order? @relation(fields: [orderIdOrder], references: [idOrder])
  orderIdOrder String @unique
}

model ShoppingCartDetails {
  idShoppingCartDetails Int @id @default(autoincrement())

  quantity Int
  price    Float

  ShoppingCart            ShoppingCart?   @relation(fields: [shoppingCartIdCart], references: [idCart])
  shoppingCartIdCart      Int?
  ProductCatalog          ProductCatalog? @relation(fields: [productCatalogIdProduct], references: [idProduct])
  productCatalogIdProduct String?
}

model OrderDetails {
  idOrderDetail Int @id @default(autoincrement())

  quantity Int
  price    Float

  Order                   Order?          @relation(fields: [orderIdOrder], references: [idOrder])
  orderIdOrder            String?
  ProductCatalog          ProductCatalog? @relation(fields: [productCatalogIdProduct], references: [idProduct])
  productCatalogIdProduct String?
}

model ProductCatalog {
  idProduct String @id @default(uuid())

  productName   String
  description   String?
  available     Boolean  @default(true)
  stockQuantity Int      @default(1)
  price         Float
  tags          String[] @default([])
  slug          String   @unique
  createdBy     String
  updatedBy     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ProductCategory           ProductCategory?      @relation(fields: [productCategoryIdCategory], references: [idCategory])
  productCategoryIdCategory Int?
  productImage              ProductImage[]
  productRating             ProductRating[]
  shoppingCartDetails       ShoppingCartDetails[]
  orderDetails              OrderDetails[]
}

model ProductCategory {
  idCategory Int @id @default(autoincrement())

  categoryName String   @unique
  isActive     Boolean  @default(true)
  createdBy    String?
  updatedBy    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  productCatalog ProductCatalog[]
}

model ProductImage {
  idProductImage Int @id @default(autoincrement())

  url String

  ProductCatalog          ProductCatalog? @relation(fields: [productCatalogIdProduct], references: [idProduct])
  productCatalogIdProduct String?
}

model ProductRating {
  idProductRating Int @id @default(autoincrement())

  rating    Int
  createdBy String   @unique
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProductCatalog          ProductCatalog? @relation(fields: [productCatalogIdProduct], references: [idProduct])
  productCatalogIdProduct String?
}
